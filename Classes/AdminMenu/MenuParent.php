<?php

namespace Classes\AdminMenu;

use Classes\Translate;

/**
 *  $page_title(строка) (обязательный)
 *      Текст, который будет использован в теге <title> на странице, относящейся к пункту меню.
 *  $menu_title(строка) (обязательный)
 *      Название пункта меню в сайдбаре админ-панели.
 *  $capability(строка) (обязательный)
 *      Права пользователя (возможности), необходимые чтобы пункт меню появился в списке. Таблицу возможностей смотрите здесь.
 *      https://wp-kama.ru/function/current_user_can#bazovyj-spisok-prav
 *  $menu_slug(строка) (обязательный)
        * Уникальное название (slug), по которому затем можно обращаться к этому меню.
        * Если параметр $function не указан, этот параметр должен равняться названию PHP файла относительно каталога плагинов,
 *      который отвечает за вывод кода страницы этого пункта меню.
        * Можно указать произвольную ссылку (URL), куда будет вести клик пункта меню.
 * $function(строка)
        * Название функции, которая выводит контент страницы пункта меню.
        * Этот необязательный параметр и если он не указан, WordPress ожидает что текущий подключаемый PHP файл генерирует
 *      код страницы админ-меню, без вызова функции. Большинство авторов плагинов предпочитают указывать этот параметр.
        * Два варианта установки параметра:
            * Если функция является методом класса, она вызывается по ссылке:
                * array( $this, 'function_name' )
            * или статически:
                * array( __CLASS__, 'function_name' ).
        * Во всех остальных случаях указываем название функции в виде строки.
 * $icon_url(строка)
        * Иконка для пункта меню.
        * Картинка — чтобы подключить произвольную картинку, укажите URL картинки. Для этого можно использовать функцию:
 *      plugin_dir_url( __FILE__ ) .'plugin-icon.png'. Размеры картники должны быть 20х20 пикселей или меньше.
        * dashicons — WP использует специальные иконки dashicons, чтобы указать одну из этих иконок, выберите нужную в
 *      коллекции иконок и укажите в этом параметре название иконки. Например, иконка консоли называется dashicons-dashboard указываем это название.
        * base64 — можно указывать закодированную в base64 строку, которая будет содержать картинку: data:image/svg+xml;base64....
 *      В этом случае, иконка будет указана как фон слоя.
        * none — если указать 'none', то будет создан слой div картинку для которого можно затем указать в CSS стилях.
        * '' — когда указана пустая строка (по умолчанию), используется иконка консоли из списка dashicons и будет добавлен CSS класс menu-icon-generic.
        * По умолчанию: ''
 * $position(число)
        * Число определяющее позицию меню. Чем больше цифра, тем ниже будет расположен пункт меню.
        * Внимание! Если два пункта используют одинаковую цифру-позицию, один из пунктов меню может быть перезаписан и
 *      будет показан только один пункт из двух. Чтобы избежать конфликта, можно использовать десятичные значения, вместо целых чисел: 63.3
 *      вместо 63. Используйте кавычки: "63.3".
        * По умолчанию, пункт меню будет добавлен в конец списка.
        * Список позиций для базовых пунктов меню:
 *          2 Консоль
            * 4 Разделитель
            * 5 Посты
            * 10 Медиа
            * 15 Ссылки
            * 20 Страницы
            * 25 Комментарии
            * 59 Разделитель
            * 60 Внешний вид
            * 65 Плагины
            * 70 Пользователи
            * 75 Инструменты
            * 80 Настройки
            * 99 Разделитель
 */
abstract class MenuParent
{
    protected $page_title = null;
    protected $menu_title = null;
    protected $capability = null;
    protected $menu_slug = null;
    protected $function = null;
    protected $icon_url = null;
    protected $position = null;

    protected function __construct(
        string $page_title,
        string $menu_title,
        string $capability,
        string $menu_slug = null,
        $function = null,
        string $icon_url = null,
        int $position = null)
    {
        $this->page_title = $page_title;
        $this->menu_title = $menu_title;
        $this->capability = $capability;
        $this->menu_slug = empty($menu_slug)?$this->set_menu_slug($this->menu_title):$menu_slug;
        $this->function = $function;
        $this->icon_url = $icon_url;
        $this->position = $position;

        add_action('admin_menu', [$this,'handler']);
    }

    private function set_menu_slug(string $title):string
    {
        return Translate::convertor($title);
    }



    abstract function handler();
}